syntax = "proto3";

package yome.fgo.data.proto;

enum Traits {
  NO_TRAITS = 0;
  ARTHUR = 1;
  ASSOCIATED_TO_THE_ARGO = 36;
  BLESSED_BY_KUR = 53;
  BRYNHILDS_BELOVED = 25;
  BURNING = 34;
  BURNING_LOVE = 48;
  CAENIS = 38;
  CHILD_SERVANT = 2;
  CITY = 3;
  DEMI_SERVANT = 31;
  DEMON = 30;
  DEMONIC = 4;
  DEMONIC_BEAST = 39;
  DIVINE = 5;
  DIVINE_SPIRIT = 47;
  DRAGON = 6;
  EXISTENCE_OUTSIDE_DOMAIN = 43;
  FAE = 7;
  FAIRY_TALE_SERVANT = 49;
  FEMININE_LOOKING_SERVANT = 8;
  FOREST = 32;
  GENJI = 44;
  GIANT = 41;
  GREEK_MYTHOLOGY_MALES = 33;
  HAS_COSTUME = 45;
  HAVING_ANIMAL_CHARACTERISTICS = 50;
  HOMINIDAE_SERVANT = 9;
  HUMAN = 10;
  HUMANOID = 11;
  ILLYA = 35;
  IMAGINARY_SPACE = 42;
  KING = 24;
  KNIGHTS_OF_THE_ROUND = 12;
  LIKE = 51;
  LIVING_HUMAN = 40;
  MASSIVE = 52;
  MECHANICAL = 46;
  MERLIN = 56;
  NOBUNAGA = 54;
  ONI = 13;
  PSEUDO_SERVANT = 14;
  RIDING = 15;
  ROMAN = 16;
  SABER_FACE = 17;
  SERVANT = 18;
  SHADOW_SERVANT = 29;
  SHORE = 19;
  SHUTEN = 26;
  SUNLIGHT = 27;
  THREAT_TO_HUMANITY = 20;
  UNDEAD = 23;
  WEAK_POINTS_REVEALED = 37;
  WEAK_TO_ENUMA_ELISH = 21;
  WILD_BEAST = 22;
  VENGEANCE = 55;
}

enum FateClass {
  NO_CLASS = 0;
  SABER = 1;
  ARCHER = 2;
  LANCER = 3;
  RIDER = 4;
  CASTER = 5;
  ASSASSIN = 6;
  BERSERKER = 7;
  RULER = 8;
  AVENGER = 9;
  ALTEREGO = 10;
  MOONCANCER = 11;
  FOREIGNER = 12;
  PRETENDER = 13;
  SHIELDER = 14;

  BEAST_I = 30;
  BEAST_II = 31;
  BEAST_III_R = 32;
  BEAST_III_L = 33;
  BEAST_IV = 34;

  ANY_CLASS = 50;
}

enum Gender {
  NO_GENDER = 0;
  MALE = 1;
  FEMALE = 2;
  OTHER = 3;
}

enum Alignment {
  NO_ALIGNMENT = 0;
  LAWFUL = 1;
  NEUTRAL = 2;
  CHAOTIC = 3;
  GOOD = 4;
  BALANCED = 5;
  EVIL = 6;
  INSANE = 7;
  SUMMER = 8;
  BRIDE = 9;
}

enum Attribute {
  NO_ATTRIBUTE = 0;
  SKY = 1;
  EARTH = 2;
  MAN = 3;
  STAR = 4;
  BEAST = 5;
}

message CombatantData {
  string id = 1;
  int32 rarity = 2;
  FateClass fateClass = 3;
  Gender gender = 4;
  repeated Alignment alignments = 5;
  Attribute attribute = 6;
  repeated string traits = 7;
  double deathRate = 8;

  bool undeadNpCorrection = 9;
}

message ServantData {
  repeated ServantAscensionData servantAscensionData = 1;
}

message ServantAscensionData {
  CombatantData combatantData = 1;
  double defenseNpRate = 2;
  int32 criticalStarWeight = 4;

  repeated CommandCardData commandCardData = 5;
  repeated ActiveSkillUpgrades activeSkillUpgrades = 6;
  repeated PassiveSkillData passiveSkillData = 7;
  repeated AppendSkillData appendSkillData = 8;

  repeated Status servantStatusData = 9;

  NoblePhantasmUpgrades noblePhantasmUpgrades = 10;
  CommandCardData extraCard = 11;
  int32 cost = 12;
}

enum CommandCardType {
  ANY = 0;
  QUICK = 1;
  ARTS = 2;
  BUSTER = 3;
  EXTRA = 4;
}

enum NoblePhantasmType {
  ANY_NP_TYPE = 0;
  SINGLE_TARGET_NP = 1;
  ALL_TARGETS_NP = 2;
  NON_DAMAGE = 3;
}

message NoblePhantasmUpgrades {
  repeated NoblePhantasmData noblePhantasmData = 1;
}

message NoblePhantasmData {
  CommandCardData commandCardData = 1;
  repeated EffectData effects = 2;
  NoblePhantasmType noblePhantasmType = 3;
  ConditionData activationCondition = 4;
}

message CommandCardData {
  CommandCardType commandCardType = 1;
  repeated int32 hitsData = 2;
  double npRate = 3;
  double criticalStarGen = 4;
}

message ActiveSkillUpgrades {
  repeated ActiveSkillData activeSkillData = 1;
}

message ActiveSkillData {
  int32 baseCoolDown = 1;
  repeated EffectData effects = 2;
  ConditionData activationCondition = 3;
}

message PassiveSkillData {
  repeated EffectData effects = 1;
}

message AppendSkillData {
  repeated EffectData effects = 1;
}

message EffectData {
  string type = 1;
  Target target = 2;
  ConditionData applyCondition = 7;
  bool isOverchargedEffect = 5; // for effects with additional params, need to specifically set which part is overcharged in respecting params
  repeated double values = 6;
  repeated BuffData buffData = 8; // each represents one OC for GrantBuff

  bool isProbabilityOvercharged = 13;
  repeated double probabilities = 9;

  NpDamageAdditionalParams npDamageAdditionalParams = 11;

  repeated CommandCardType cardTypeSelections = 12;

  repeated int32 intValues = 14; // for int value effects

  // for hp change
  bool isLethal = 15;
  bool isHpChangePercentBased = 16;

  VariationData variationData = 17;
  repeated double additions = 18;
  bool isAdditionOvercharged = 19;

  bool removeFromStart = 20;

  repeated EffectData randomEffectSelections = 21;
}

message NpDamageAdditionalParams {
  bool isNpDamageOverchargedEffect = 1;
  repeated double npOverchargeDamageRate = 2;

  ConditionData npSpecificDamageCondition = 4;
  bool isNpSpecificDamageOverchargedEffect = 5;
  repeated double npSpecificDamageRate = 6;

  bool isNpIgnoreDefense = 7;

  VariationData npSpecificDamageVariation = 13;
  repeated double npSpecificDamageAdditions = 14;
  bool isNpSpecificDamageAdditionOvercharged = 15;
}

message BuffData {
  string type = 1;
  int32 numTurnsActive = 2;
  int32 numTimesActive = 3;
  ConditionData applyCondition = 4;
  repeated EffectData subEffects = 5;
  repeated double values = 6;
  string stringValue = 7;
  repeated double probabilities = 8;

  repeated string customTraits = 9;
  bool irremovable = 10;
  bool forceStackable = 11;

  bool isGutsPercentBased = 14;

  ClassAdvantageChangeAdditionalParams classAdvChangeAdditionalParams = 15;

  VariationData variationData = 18;
  repeated double additions = 19;
}

enum BuffTraits {
  NO_BUFF_TRAITS = 0;
  ATTACKER_BUFF = 1;
  DEFENDER_BUFF = 2;
  MENTAL_BUFF = 3;
  POSITIVE_BUFF = 4;
  NEGATIVE_BUFF = 5;
  IMMOBILIZE_BUFF = 6;
}

message HpVariedBuffAdditionalParams {
  repeated double maxHpPercent = 1;
  repeated double minHpPercent = 2;
  repeated double baseValue = 3;
}

message ClassAdvantageChangeAdditionalParams {
  ClassAdvantageChangeMode attackMode = 1;
  bool customizeAttackModifier = 7;
  double attackAdv = 2;
  repeated FateClass attackModeAffectedClasses = 5;

  ClassAdvantageChangeMode defenseMode = 3;
  bool customizeDefenseModifier = 8;
  double defenseAdv = 4;
  repeated FateClass defenseModeAffectedClasses = 6;
}

enum ClassAdvantageChangeMode {
  CLASS_ADV_NO_CHANGE = 0;
  CLASS_ADV_FIXED_RATE = 1;
  CLASS_ADV_REMOVE_ADV = 2;
  CLASS_ADV_REMOVE_DISADV = 3;
}

enum Target {
  NONE = 0;
  // Should use EFFECT_TARGET when writing condition for debuffResists, e.g. debuffResist +20% if self (should be EFFECT_TARGET) has EVIL.
  // This won't work because in code SELF is always ACTIVATOR when activating skills.
  // To avoid any confusions, can also just stick with ACTIVATOR & EFFECT_TARGET for all skills
  SELF = 1;
  FIRST_ALLY_EXCLUDING_SELF = 2;
  TARGETED_ALLY = 3;
  NON_TARGETED_ALLIES = 4;
  ALL_ALLIES = 5;
  ALL_ALLIES_EXCLUDING_SELF = 6;
  ALL_ALLIES_INCLUDING_BACKUP = 7;
  ALL_ALLIES_EXCLUDING_SELF_INCLUDING_BACKUP = 8;
  FIRST_ENEMY = 9;
  TARGETED_ENEMY = 10;
  NON_TARGETED_ENEMIES = 11;
  ALL_ENEMIES = 12;
  ALL_ENEMIES_INCLUDING_BACKUP = 13;
  ALL_CHARACTERS = 14;
  ALL_CHARACTERS_EXCLUDING_SELF = 15;
  ALL_CHARACTERS_INCLUDING_BACKUP = 16;
  ALL_CHARACTERS_EXCLUDING_SELF_INCLUDING_BACKUP = 17;

  ATTACKER = 18;
  DEFENDER = 19;
  EFFECT_TARGET = 20;
  ACTIVATOR = 21; // just to avoid ambiguity. This is same as self, or self is the same as activator
  SERVANT_EXCHANGE = 30;
}

message ConditionData {
  string type = 1;
  string value = 2;
  repeated ConditionData subConditionData = 3;
  Target target = 4;
  double doubleValue = 5;
}

message VariationData {
  string type = 1;
  ConditionData conditionData = 2;
  double maxHp = 3;
  double minHp = 4;
  string trait = 5;
  int32 maxCount = 6;
  Target target = 7;
}

message Status {
  int32 lv = 1;
  int32 HP = 2;
  int32 ATK = 3;
}

message LevelData {
  string id = 1;
  repeated StageData stageData = 2;
  repeated EffectData effects = 3;
}

message StageData {
  repeated EnemyData enemyData = 1;
  repeated EffectData effects = 2;
  int32 maximumEnemiesOnScreen = 3;
  repeated string traits = 4;
}

message EnemyData {
  string enemyBaseId = 1;
  repeated int32 hpBars = 2;
  CombatantData combatantDataOverride = 3;

  int32 customMaxNpGauge = 4;
  bool hasCustomMaxNpGauge = 5;

  int32 servantAscension = 6;
  string enemyCategories = 7;
}

message CommandCardOption {
  int32 strengthen = 1;
  string commandCode = 2;
}

message ServantOption {
  int32 servantLevel = 1;
  int32 noblePhantasmRank = 2;
  int32 noblePhantasmLevel = 3;
  int32 attackStatusUp = 4;
  int32 healthStatusUp = 5;

  repeated int32 activeSkillRanks = 6;
  repeated int32 activeSkillLevels = 7;
  repeated int32 appendSkillLevels = 8;

  repeated CommandCardOption commandCardOptions = 9;

  int32 bond = 10;
  int32 ascension = 11;
}

message CraftEssenceData {
  string id = 1;
  repeated EffectData effects = 2;
  int32 cost = 3;
  int32 rarity = 4;
  repeated int32 atkStats = 5;
  repeated int32 hpStats = 6;
}

message CraftEssenceOption {
  int32 craftEssenceLevel = 1;
  bool isLimitBreak = 2;
}

message MysticCodeData {
  repeated ActiveSkillData activeSkillData = 1;
  string id = 2;
}

message MysticCodeOption {
  int32 mysticCodeLevel = 1;
}